local RayfieldKeySystem = {}
RayfieldKeySystem.__index = RayfieldKeySystem

local function getService(name)
    local service = game:GetService(name)
    return if cloneref then cloneref(service) else service
end

local HttpService = getService("HttpService")
local Players = getService("Players")
local CoreGui = getService("CoreGui")
local TweenService = getService("TweenService")
local RunService = getService("RunService")
local UserInputService = getService("UserInputService")

local RayfieldFolder = "Rayfield"
local ConfigurationExtension = ".rfld"
local request = (syn and syn.request) or (fluxus and fluxus.request) or (http and http.request) or http_request or request
local useStudio = RunService:IsStudio() or false
local InterfaceBuild = '3K3W'
local correctBuild = false
local buildAttempts = 0

function RayfieldKeySystem.new(KeySettings, DisableBuildWarnings)
    local self = setmetatable({}, RayfieldKeySystem)
    self.KeySettings = KeySettings
    self.DisableBuildWarnings = DisableBuildWarnings
    self.Passthrough = false
    self:ValidateKeySettings()
    self:InitFileSystem()
    self:CheckBuildCompatibility()
    return self
end

function RayfieldKeySystem:ValidateKeySettings()
    if not self.KeySettings then
        warn("Rayfield | KeySystem enabled but no KeySettings provided")
        self.Passthrough = true
        return
    end
    self.KeySettings.Title = self.KeySettings.Title or "Untitled"
    self.KeySettings.Subtitle = self.KeySettings.Subtitle or "Key System"
    self.KeySettings.Note = self.KeySettings.Note or "No instructions"
    self.KeySettings.FileName = self.KeySettings.FileName or "No file name specified"
    self.KeySettings.SaveKey = self.KeySettings.SaveKey ~= nil and self.KeySettings.SaveKey or true
    self.KeySettings.GrabKeyFromSite = self.KeySettings.GrabKeyFromSite ~= nil and self.KeySettings.GrabKeyFromSite or false
    if typeof(self.KeySettings.Key) == "string" then
        self.KeySettings.Key = {self.KeySettings.Key}
    end
    self.KeySettings.Key = self.KeySettings.Key or {}
    if self.KeySettings.GrabKeyFromSite then
        for i, KeyUrl in ipairs(self.KeySettings.Key) do
            local Success, Response = pcall(function()
                local RawKey = tostring(game:HttpGet(KeyUrl):gsub("[\n\r]", " "))
                self.KeySettings.Key[i] = string.gsub(RawKey, " ", "")
            end)
            if not Success then
                print("Rayfield | Failed to fetch key from " .. KeyUrl .. ": " .. tostring(Response))
                warn('Check docs.sirius.menu for help with Rayfield specific development.')
            end
        end
    end
    self.AttemptsRemaining = math.random(2, 5)
end

function RayfieldKeySystem:InitFileSystem()
    if isfolder and not isfolder(RayfieldFolder .. "/Key System") then
        makefolder(RayfieldFolder .. "/Key System")
    end
    if isfile and isfile(RayfieldFolder .. "/Key System/" .. self.KeySettings.FileName .. ConfigurationExtension) then
        local SavedKey = readfile(RayfieldFolder .. "/Key System/" .. self.KeySettings.FileName .. ConfigurationExtension)
        for _, ValidKey in ipairs(self.KeySettings.Key) do
            if SavedKey == ValidKey then
                self.Passthrough = true
                break
            end
        end
    end
end

function RayfieldKeySystem:CheckBuildCompatibility()
    local RayfieldUI = useStudio and script.Parent:FindFirstChild('Rayfield') or game:GetObjects("rbxassetid://10804731440")[1]
    repeat
        if RayfieldUI:FindFirstChild('Build') and RayfieldUI.Build.Value == InterfaceBuild then
            correctBuild = true
            break
        end
        correctBuild = false
        if not self.DisableBuildWarnings then
            warn('Rayfield | Build Mismatch')
            print('Rayfield may encounter issues as you are running an incompatible interface version ('.. ((RayfieldUI:FindFirstChild('Build') and RayfieldUI.Build.Value) or 'No Build') ..').\n\nThis version of Rayfield is intended for interface build '..InterfaceBuild..'.')
        end
        local toDestroy = RayfieldUI
        RayfieldUI = useStudio and script.Parent:FindFirstChild('Rayfield') or game:GetObjects("rbxassetid://10804731440")[1]
        if toDestroy and not useStudio then toDestroy:Destroy() end
        buildAttempts = buildAttempts + 1
    until buildAttempts >= 2
    RayfieldUI:Destroy()
end

function RayfieldKeySystem:LoadKeyUI()
    local KeyUI = useStudio and script.Parent:FindFirstChild('Key') or game:GetObjects("rbxassetid://11380036235")[1]
    KeyUI.Enabled = true
    if gethui then
        KeyUI.Parent = gethui()
    elseif syn and syn.protect_gui then 
        syn.protect_gui(KeyUI)
        KeyUI.Parent = CoreGui
    elseif not useStudio and CoreGui:FindFirstChild("RobloxGui") then
        KeyUI.Parent = CoreGui:FindFirstChild("RobloxGui")
    else
        KeyUI.Parent = CoreGui
    end
    local Parent = gethui() or CoreGui
    for _, Interface in ipairs(Parent:GetChildren()) do
        if Interface.Name == KeyUI.Name and Interface ~= KeyUI then
            Interface.Enabled = false
            Interface.Name = "KeyUI-Old"
        end
    end
    self.KeyUI = KeyUI
    self.KeyMain = KeyUI.Main
    self:InitKeyUIStyle()
    self:BindKeyUIEvents()
end

function RayfieldKeySystem:InitKeyUIStyle()
    local KeyMain = self.KeyMain
    KeyMain.Title.Text = self.KeySettings.Title
    KeyMain.Subtitle.Text = self.KeySettings.Subtitle
    KeyMain.NoteMessage.Text = self.KeySettings.Note
    KeyMain.Size = UDim2.new(0, 467, 0, 175)
    KeyMain.BackgroundTransparency = 1
    KeyMain.Shadow.Image.ImageTransparency = 1
    KeyMain.Title.TextTransparency = 1
    KeyMain.Subtitle.TextTransparency = 1
    KeyMain.KeyNote.TextTransparency = 1
    KeyMain.Input.BackgroundTransparency = 1
    KeyMain.Input.UIStroke.Transparency = 1
    KeyMain.Input.InputBox.TextTransparency = 1
    KeyMain.NoteTitle.TextTransparency = 1
    KeyMain.NoteMessage.TextTransparency = 1
    KeyMain.Hide.ImageTransparency = 1
    TweenService:Create(KeyMain, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
    TweenService:Create(KeyMain, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = UDim2.new(0, 500, 0, 187)}):Play()
    TweenService:Create(KeyMain.Shadow.Image, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {ImageTransparency = 0.5}):Play()
    task.wait(0.05)
    TweenService:Create(KeyMain.Title, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()
    TweenService:Create(KeyMain.Subtitle, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()
    task.wait(0.05)
    TweenService:Create(KeyMain.KeyNote, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()
    TweenService:Create(KeyMain.Input, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0}):Play()
    TweenService:Create(KeyMain.Input.UIStroke, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {Transparency = 0}):Play()
    TweenService:Create(KeyMain.Input.InputBox, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()
    task.wait(0.05)
    TweenService:Create(KeyMain.NoteTitle, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()
    TweenService:Create(KeyMain.NoteMessage, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()
    task.wait(0.15)
    TweenService:Create(KeyMain.Hide, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {ImageTransparency = 0.3}):Play()
end

function RayfieldKeySystem:BindKeyUIEvents()
    local KeyMain = self.KeyMain
    local InputBox = KeyMain.Input.InputBox
    InputBox.FocusLost:Connect(function()
        if #InputBox.Text == 0 then return end
        local KeyFound = false
        local FoundKey = ""
        for _, ValidKey in ipairs(self.KeySettings.Key) do
            if InputBox.Text == ValidKey then
                KeyFound = true
                FoundKey = ValidKey
                break
            end
        end
        if KeyFound then
            self:OnKeyValid(FoundKey)
        else
            self:OnKeyInvalid()
        end
    end)
    KeyMain.Hide.MouseButton1Click:Connect(function()
        self:CloseKeyUI()
        self.Passthrough = false
    end)
end

function RayfieldKeySystem:OnKeyValid(FoundKey)
    local KeyMain = self.KeyMain
    TweenService:Create(KeyMain, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundTransparency = 1}):Play()
    TweenService:Create(KeyMain, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = UDim2.new(0, 467, 0, 175)}):Play()
    TweenService:Create(KeyMain.Shadow.Image, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
    TweenService:Create(KeyMain.Title, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
    TweenService:Create(KeyMain.Subtitle, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
    TweenService:Create(KeyMain.KeyNote, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
    TweenService:Create(KeyMain.Input, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {BackgroundTransparency = 1}):Play()
    TweenService:Create(KeyMain.Input.UIStroke, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
    TweenService:Create(KeyMain.Input.InputBox, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
    TweenService:Create(KeyMain.NoteTitle, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
    TweenService:Create(KeyMain.NoteMessage, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
    TweenService:Create(KeyMain.Hide, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
    task.wait(0.51)
    self.Passthrough = true
    KeyMain.Visible = false
    if self.KeySettings.SaveKey and writefile then
        writefile(RayfieldFolder .. "/Key System/" .. self.KeySettings.FileName .. ConfigurationExtension, FoundKey)
        self:ShowNotification({
            Title = "Key System",
            Content = "The key for this script has been saved successfully.",
            Image = 3605522284,
            Duration = 3
        })
    end
end

function RayfieldKeySystem:OnKeyInvalid()
    local KeyMain = self.KeyMain
    self.AttemptsRemaining = self.AttemptsRemaining - 1
    KeyMain.Input.InputBox.Text = ""
    TweenService:Create(KeyMain, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = UDim2.new(0, 467, 0, 175)}):Play()
    TweenService:Create(KeyMain, TweenInfo.new(0.4, Enum.EasingStyle.Elastic), {Position = UDim2.new(0.495, 0, 0.5, 0)}):Play()
    task.wait(0.1)
    TweenService:Create(KeyMain, TweenInfo.new(0.4, Enum.EasingStyle.Elastic), {Position = UDim2.new(0.505, 0, 0.5, 0)}):Play()
    task.wait(0.1)
    TweenService:Create(KeyMain, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {Position = UDim2.new(0.5, 0, 0.5, 0)}):Play()
    TweenService:Create(KeyMain, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = UDim2.new(0, 500, 0, 187)}):Play()
    if self.AttemptsRemaining <= 0 then
        TweenService:Create(KeyMain, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundTransparency = 1}):Play()
        TweenService:Create(KeyMain, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = UDim2.new(0, 467, 0, 175)}):Play()
        TweenService:Create(KeyMain.Shadow.Image, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
        TweenService:Create(KeyMain.Title, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
        TweenService:Create(KeyMain.Subtitle, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
        TweenService:Create(KeyMain.KeyNote, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
        TweenService:Create(KeyMain.Input, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {BackgroundTransparency = 1}):Play()
        TweenService:Create(KeyMain.Input.UIStroke, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
        TweenService:Create(KeyMain.Input.InputBox, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
        TweenService:Create(KeyMain.NoteTitle, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
        TweenService:Create(KeyMain.NoteMessage, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
        TweenService:Create(KeyMain.Hide, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
        task.wait(0.45)
        Players.LocalPlayer:Kick("No Attempts Remaining")
        game:Shutdown()
    end
end

function RayfieldKeySystem:CloseKeyUI()
    if not self.KeyUI then return end
    local KeyMain = self.KeyMain
    TweenService:Create(KeyMain, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {BackgroundTransparency = 1}):Play()
    TweenService:Create(KeyMain, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = UDim2.new(0, 467, 0, 175)}):Play()
    TweenService:Create(KeyMain.Shadow.Image, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
    TweenService:Create(KeyMain.Title, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
    TweenService:Create(KeyMain.Subtitle, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
    TweenService:Create(KeyMain.KeyNote, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
    TweenService:Create(KeyMain.Input, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {BackgroundTransparency = 1}):Play()
    TweenService:Create(KeyMain.Input.UIStroke, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
    TweenService:Create(KeyMain.Input.InputBox, TweenInfo.new(0.5, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
    TweenService:Create(KeyMain.NoteTitle, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
    TweenService:Create(KeyMain.NoteMessage, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
    TweenService:Create(KeyMain.Hide, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
    task.wait(0.51)
    self.KeyUI:Destroy()
end

function RayfieldKeySystem:ShowNotification(data)
    task.spawn(function()
        local NotificationsGui = Instance.new("ScreenGui")
        NotificationsGui.Name = "RayfieldNotifications"
        NotificationsGui.Parent = gethui() or CoreGui
        local newNotification = Instance.new("Frame")
        newNotification.Name = data.Title or 'No Title Provided'
        newNotification.Parent = NotificationsGui
        newNotification.LayoutOrder = #NotificationsGui:GetChildren()
        newNotification.Visible = false
        newNotification.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
        newNotification.UIStroke = Instance.new("UIStroke", newNotification)
        newNotification.UIStroke.Color = Color3.fromRGB(240, 240, 240)
        newNotification.Shadow = Instance.new("ImageLabel", newNotification)
        newNotification.Shadow.Name = "Shadow"
        newNotification.Shadow.Size = UDim2.new(1, 10, 1, 10)
        newNotification.Shadow.Position = UDim2.new(0, -5, 0, -5)
        newNotification.Shadow.BackgroundTransparency = 1
        newNotification.Shadow.Image = "rbxassetid://10480743857"
        newNotification.Shadow.ImageColor3 = Color3.fromRGB(20, 20, 20)
        newNotification.Shadow.ScaleType = Enum.ScaleType.Slice
        newNotification.Shadow.SliceCenter = Rect.new(10, 10, 90, 90)
        newNotification.Icon = Instance.new("ImageLabel", newNotification)
        newNotification.Icon.Name = "Icon"
        newNotification.Icon.Size = UDim2.new(0, 32, 0, 32)
        newNotification.Icon.Position = UDim2.new(0, 20, 0.5, 0)
        newNotification.Icon.AnchorPoint = Vector2.new(0, 0.5)
        newNotification.Icon.BackgroundTransparency = 1
        newNotification.Title = Instance.new("TextLabel", newNotification)
        newNotification.Title.Name = "Title"
        newNotification.Title.Size = UDim2.new(1, -60, 0, 20)
        newNotification.Title.Position = UDim2.new(0, 60, 0, 10)
        newNotification.Title.BackgroundTransparency = 1
        newNotification.Title.TextColor3 = Color3.fromRGB(240, 240, 240)
        newNotification.Title.TextFont = Enum.Font.GothamMedium
        newNotification.Title.TextSize = 16
        newNotification.Description = Instance.new("TextLabel", newNotification)
        newNotification.Description.Name = "Description"
        newNotification.Description.Size = UDim2.new(1, -60, 0, 30)
        newNotification.Description.Position = UDim2.new(0, 60, 0, 35)
        newNotification.Description.BackgroundTransparency = 1
        newNotification.Description.TextColor3 = Color3.fromRGB(240, 240, 240)
        newNotification.Description.TextFont = Enum.Font.Gotham
        newNotification.Description.TextSize = 12
        newNotification.Description.TextWrapped = true
        newNotification.Title.Text = data.Title or "Unknown Title"
        newNotification.Description.Text = data.Content or "Unknown Content"
        if data.Image then
            newNotification.Icon.Image = "rbxassetid://" .. data.Image
        else
            newNotification.Icon.Image = "rbxassetid://0"
        end
        newNotification.BackgroundTransparency = 1
        newNotification.Title.TextTransparency = 1
        newNotification.Description.TextTransparency = 1
        newNotification.UIStroke.Transparency = 1
        newNotification.Shadow.ImageTransparency = 1
        newNotification.Size = UDim2.new(1, 0, 0, 800)
        newNotification.Icon.ImageTransparency = 1
        task.wait()
        newNotification.Visible = true
        local bounds = {newNotification.Title.TextBounds.Y, newNotification.Description.TextBounds.Y}
        newNotification.Size = UDim2.new(1, -60, 0, -(#NotificationsGui:GetChildren() > 1 and 10 or 0))
        TweenService:Create(newNotification, TweenInfo.new(0.6, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, 0, 0, math.max(bounds[1] + bounds[2] + 31, 60))}):Play()
        task.wait(0.15)
        TweenService:Create(newNotification, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {BackgroundTransparency = 0.45}):Play()
        TweenService:Create(newNotification.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0}):Play()
        task.wait(0.05)
        TweenService:Create(newNotification.Icon, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0}):Play()
        task.wait(0.05)
        TweenService:Create(newNotification.Description, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 0.35}):Play()
        TweenService:Create(newNotification.UIStroke, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {Transparency = 0.95}):Play()
        TweenService:Create(newNotification.Shadow, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 0.82}):Play()
        local waitDuration = math.min(math.max((#newNotification.Description.Text * 0.1) + 2.5, 3), 10)
        task.wait(data.Duration or waitDuration)
        newNotification.Icon.Visible = false
        TweenService:Create(newNotification, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {BackgroundTransparency = 1}):Play()
        TweenService:Create(newNotification.UIStroke, TweenInfo.new(0.4, Enum.EasingStyle.Exponential), {Transparency = 1}):Play()
        TweenService:Create(newNotification.Shadow, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {ImageTransparency = 1}):Play()
        TweenService:Create(newNotification.Title, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
        TweenService:Create(newNotification.Description, TweenInfo.new(0.3, Enum.EasingStyle.Exponential), {TextTransparency = 1}):Play()
        TweenService:Create(newNotification, TweenInfo.new(1, Enum.EasingStyle.Exponential), {Size = UDim2.new(1, -90, 0, 0)}):Play()
        task.wait(1)
        newNotification:Destroy()
        NotificationsGui:Destroy()
    end)
end

function RayfieldKeySystem:WaitForValidation()
    if self.Passthrough then 
        self:ShowNotification({
            Title = "Key System",
            Content = "Valid key found, loading script...",
            Image = 4384403532,
            Duration = 3
        })
        return true 
    end
    self:LoadKeyUI()
    repeat task.wait() until self.Passthrough
    return true
end

function RayfieldKeySystem:Destroy()
    self:CloseKeyUI()
end

return RayfieldKeySystem